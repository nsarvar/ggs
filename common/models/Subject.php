<?php

namespace common\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "subject".
 *
 * @property int $id
 * @property int $parent_id
 * @property string $name
 *
 * @property Course[] $courses
 */
class Subject extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'subject';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['name'], 'string', 'max' => 50],
            [['parent_id'], 'integer'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('main', 'ID'),
            'name' => Yii::t('main', 'Name'),
            'parent_id' => Yii::t('main', 'Parent Subject'),
            'catsAsString' => Yii::t('main', 'Cats As String'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCourses()
    {
        return $this->hasMany(Course::className(), ['subject_id' => 'id']);
    }

    public static function getModelsAsArray() {
        $models = Subject::find()->asArray()->all();
        return $models;
    }

    public static function getModelsAsMap() {
        $models = Subject::find()->all();
        return ArrayHelper::map($models,'id','name');
    }

    public static function getMainSubjectsAsMap($id = false)
    {
        $models = Subject::find()->andWhere(['parent_id' => null]);
        if($id != false )
            $models->andWhere('not id='.$id);

        return ArrayHelper::map($models->all(),'id' ,'name');
    }

    public function getParent()
    {
        $model = Subject::findOne($this->parent_id);
        if(!empty($model->name))
            return $model->name;
        return false;
    }

    public function getCatsAsString() {
        $query = SubjectCategory::find()->select(['subject_category.subject_id', 'subject_category.category_id', 'category.name'])->join('inner join','category', 'subject_category.category_id=category.id')->andFilterWhere(['subject_category.subject_id' => $this->id]);
        if($query->exists()) {
            $string = '';
            $count = $query->count();
            $i=1;
            foreach ($query->asArray()->all() as $model) {
                $string .= $model['name'];
                if($i++<$count)
                    $string .=', ';
            }
            return $string;
        }
        return false;
    }

    public function getChilds() {
        return Subject::find()->filterWhere(['parent_id' => $this->id])->all();
    }

    public static function getModelsToSelect() {
        $models = Subject::find()->andWhere(['parent_id' => null])->all();
        $array  = [];
        foreach ($models as $model) {
            if(empty($model->childs))
                $array[$model->id] = $model->name ;
            else {
                $childs = [];
                foreach ($model->childs as $child) {
                    $childs[$child->id] = $child->name;
                }
                $array[$model->name] = $childs;
            }
        }
        return $array;
    }

    public function beforeDelete()
    {
        $models = SubjectCategory::findAll(['subject_id' => $this->id]);
        foreach ($models as $model) {
            $model->delete();
        }

        $models = $this->childs;
        if(!empty($models)) {
            foreach ($models as $model)
                $model->delete();
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
